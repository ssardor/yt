// src/bot/commands.js
const VideoProcessor = require("../services/videoProcessor");
const ThumbnailMaker = require("../services/thumbnailMaker");
const MetadataGenerator = require("../services/metadataGenerator");
const TrendAnalyzer = require("../services/trendAnalyzer");
const QuotaManager = require("../services/quotaManager");
const { logger } = require("../utils/logger");

const commands = {
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
  start: async (ctx) => {
    const keyboard = {
      keyboard: [
        ["üé• –ó–∞–≥—Ä—É–∑–∏—Ç—å –≤–∏–¥–µ–æ"],
        ["üåç RU / EN", "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"]
      ],
      resize_keyboard: true
    };
    await ctx.reply("–ü—Ä–∏–≤–µ—Ç! –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ –≤–∏–¥–µ–æ, –∏ —è –ø–æ–¥–≥–æ—Ç–æ–≤–ª—é –µ–≥–æ –¥–ª—è YouTube Shorts", keyboard);
  },

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help
  help: async (ctx) => {
    await ctx.reply("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –≤–∏–¥–µ–æ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏");
  },

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /settings
  settings: async (ctx) => {
    await ctx.reply("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞");
  },

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–∏–¥–µ–æ
  async handleVideo(ctx) {
    try {
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–≤–æ—Ç—ã
      await QuotaManager.checkQuota(ctx.from.id);

      const statusMessage = await ctx.reply("‚è≥ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≤–∏–¥–µ–æ...");

      // –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –≤–∏–¥–µ–æ
      const file = await ctx.telegram.getFile(ctx.message.video.file_id);
      const videoPath = `uploads/videos/${file.file_id}.mp4`;
      await ctx.telegram.downloadFile(file.file_id, videoPath);

      // –ü–æ–ª—É—á–µ–Ω–∏–µ —è–∑—ã–∫–∞ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é RU)
      const language = ctx.session?.language || "ru";

      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∏–¥–µ–æ
      const processedClips = await VideoProcessor.processVideo(videoPath, language);

      // –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
      await ctx.reply(`‚úÖ –ì–æ—Ç–æ–≤–æ! –°–æ–∑–¥–∞–Ω–æ ${processedClips.length} –∫–ª–∏–ø–æ–≤:`);

      // –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–∞–∂–¥–æ–≥–æ –∫–ª–∏–ø–∞ —Å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏
      for (const clip of processedClips) {
        const caption = `
üé• –ù–∞–∑–≤–∞–Ω–∏–µ: ${clip.metadata.title}

üìù –û–ø–∏—Å–∞–Ω–∏–µ:
${clip.metadata.description}

üè∑Ô∏è –¢–µ–≥–∏:
${clip.metadata.tags.join(", ")}
`;

        await ctx.replyWithVideo(
          { source: clip.path },
          {
            caption,
            width: 1080,
            height: 1920
          }
        );
      }

      // –£–≤–µ–ª–∏—á–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
      await QuotaManager.incrementQuota(ctx.from.id);

    } catch (error) {
      logger.error("Error in handleVideo:", error);
      if (error.message === "Daily limit reached") {
        await ctx.reply("‚ùå –î–æ—Å—Ç–∏–≥–Ω—É—Ç –¥–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç –≤–∏–¥–µ–æ");
      } else {
        await ctx.reply("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∏–¥–µ–æ");
      }
    }
  },

  // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —è–∑—ã–∫–∞
  async switchLanguage(ctx) {
    const keyboard = {
      inline_keyboard: [
        [
          { text: "üá∑üá∫ –†—É—Å—Å–∫–∏–π", callback_data: "lang_ru" },
          { text: "üá¨ÔøΩÔøΩ English", callback_data: "lang_en" }
        ]
      ]
    };
    await ctx.reply("–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ / Choose language:", keyboard);
  },

  // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
  async showStats(ctx) {
    const quota = await QuotaManager.getQuota(ctx.from.id);
    const remaining = quota.limit - quota.used;
    await ctx.reply(`üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:
    
üé• –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ —Å–µ–≥–æ–¥–Ω—è: ${quota.used}
‚ú® –û—Å—Ç–∞–ª–æ—Å—å: ${remaining}
üîÑ –°–±—Ä–æ—Å –ª–∏–º–∏—Ç–∞: ${new Date(quota.resetTime).toLocaleString()}`);
  }
};

module.exports = commands;
